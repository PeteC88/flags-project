{"remainingRequest":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/babel-loader/lib/index.js!/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/cache-loader/dist/cjs.js??ref--1-0!/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/vue-loader-v16/dist/index.js??ref--1-1!/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/src/pages/NationDetails.vue?vue&type=script&lang=js","dependencies":[{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/src/pages/NationDetails.vue","mtime":1654986071431},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/cache-loader/dist/cjs.js","mtime":1654801100458},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/babel-loader/lib/index.js","mtime":1654801098380},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/cache-loader/dist/cjs.js","mtime":1654801100458},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/vue-loader-v16/dist/index.js","mtime":1654801162860},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/babel.config.js","mtime":1655024167422},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/cache-loader/dist/cjs.js","mtime":1654801100458},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/babel-loader/lib/index.js","mtime":1654801098380},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/cache-loader/dist/cjs.js","mtime":1654801100458},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/vue-loader-v16/dist/index.js","mtime":1654801162860}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIGZyb20gIi9Vc2Vycy9waWV0cm9jaWNjYXJlbGxvL0Rlc2t0b3AvRnJvbnRlbmRNZW50b3IgUHJvamVjdHMvZmxhZy1jaGFsbGVuZ2UvcmVzdC1jb3VudHJpZXMtYXBpLXdpdGgtY29sb3ItdGhlbWUtc3dpdGNoZXItbWFzdGVyL2ZsYWdzLXByb2plY3Qvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIuanMiOwppbXBvcnQgX2FzeW5jVG9HZW5lcmF0b3IgZnJvbSAiL1VzZXJzL3BpZXRyb2NpY2NhcmVsbG8vRGVza3RvcC9Gcm9udGVuZE1lbnRvciBQcm9qZWN0cy9mbGFnLWNoYWxsZW5nZS9yZXN0LWNvdW50cmllcy1hcGktd2l0aC1jb2xvci10aGVtZS1zd2l0Y2hlci1tYXN0ZXIvZmxhZ3MtcHJvamVjdC9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXN5bmNUb0dlbmVyYXRvci5qcyI7CmltcG9ydCAicmVnZW5lcmF0b3ItcnVudGltZS9ydW50aW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuZmluZC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5qb2luLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMucmVnZXhwLmV4ZWMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5zdHJpbmcuc3BsaXQuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5mdW5jdGlvbi5uYW1lLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMub2JqZWN0LnZhbHVlcy5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmZpbHRlci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLmluY2x1ZGVzLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuc29ydC5qcyI7CmltcG9ydCBOYXRpb25DYXJkRGV0YWlscyBmcm9tICIuLi9jb21wb25lbnRzL05hdGlvbkNhcmREZXRhaWxzLnZ1ZSI7CmV4cG9ydCBkZWZhdWx0IHsKICBjb21wb25lbnRzOiB7CiAgICBOYXRpb25DYXJkRGV0YWlsczogTmF0aW9uQ2FyZERldGFpbHMKICB9LAogIHByb3BzOiB7CiAgICBuYW1lOiB7CiAgICAgIHR5cGU6IFN0cmluZywKICAgICAgcmVxdWlyZWQ6IHRydWUKICAgIH0KICB9LAogIGRhdGE6IGZ1bmN0aW9uIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpc0xvYWRpbmc6IGZhbHNlLAogICAgICBjb3VudHJ5Qm9yZGVyTmFtZXM6IFtdCiAgICB9OwogIH0sCiAgY29tcHV0ZWQ6IHsKICAgIGZpbHRlcmVkTmF0aW9uOiBmdW5jdGlvbiBmaWx0ZXJlZE5hdGlvbigpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKCiAgICAgIC8vcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMubmF0aW9uczsKICAgICAgcmV0dXJuIHRoaXMuJHN0b3JlLmdldHRlcnMubmF0aW9ucy5maW5kKGZ1bmN0aW9uIChjb3VudHJ5KSB7CiAgICAgICAgdmFyIG5hbWVTbHVnID0gY291bnRyeS5uYW1lLmNvbW1vbi5zcGxpdCgiICIpLmpvaW4oIi0iKTsKICAgICAgICByZXR1cm4gbmFtZVNsdWcgPT09IF90aGlzLm5hbWU7CiAgICAgIH0pOwogICAgfSwKICAgIGNvdW50cnlOYXRpdmVOYW1lOiBmdW5jdGlvbiBjb3VudHJ5TmF0aXZlTmFtZSgpIHsKICAgICAgLy90byBleHRyYWN0IHRoZSBsYXN0IGVudHJ5IGluIG5hdGl2ZSBuYW1lcwogICAgICB2YXIgbGFzdEVudHJ5TmF0aXZlTmFtZSA9IE9iamVjdC52YWx1ZXModGhpcy5maWx0ZXJlZE5hdGlvbi5uYW1lLm5hdGl2ZU5hbWUpLnBvcCgpLmNvbW1vbjsKICAgICAgcmV0dXJuIGxhc3RFbnRyeU5hdGl2ZU5hbWU7CiAgICB9LAogICAgY291bnRyeVN1YlJlZ2lvbjogZnVuY3Rpb24gY291bnRyeVN1YlJlZ2lvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuZmlsdGVyZWROYXRpb24uc3VicmVnaW9uID8gdGhpcy5maWx0ZXJlZE5hdGlvbi5zdWJyZWdpb24gOiAibm9uZSI7CiAgICB9LAogICAgY291bnRyeVRvcExldmVsRG9tYWluOiBmdW5jdGlvbiBjb3VudHJ5VG9wTGV2ZWxEb21haW4oKSB7CiAgICAgIHJldHVybiAhdGhpcy5maWx0ZXJlZE5hdGlvbi50bGQgPyAibm9uZSIgOiB0aGlzLmZpbHRlcmVkTmF0aW9uLnRsZC5qb2luKCIsICIpOwogICAgfSwKICAgIGNvdW50cnlDdXJyZW5jaWVzOiBmdW5jdGlvbiBjb3VudHJ5Q3VycmVuY2llcygpIHsKICAgICAgdmFyIGN1cnJlbmNpZXNMaXN0ID0gW107CgogICAgICBpZiAodGhpcy5maWx0ZXJlZE5hdGlvbi5jdXJyZW5jaWVzKSB7CiAgICAgICAgZm9yICh2YXIgX2kgPSAwLCBfT2JqZWN0JHZhbHVlcyA9IE9iamVjdC52YWx1ZXModGhpcy5maWx0ZXJlZE5hdGlvbi5jdXJyZW5jaWVzKTsgX2kgPCBfT2JqZWN0JHZhbHVlcy5sZW5ndGg7IF9pKyspIHsKICAgICAgICAgIHZhciBjdXJyZW5jaWVzTmFtZSA9IF9PYmplY3QkdmFsdWVzW19pXTsKICAgICAgICAgIGN1cnJlbmNpZXNMaXN0LnB1c2goY3VycmVuY2llc05hbWUubmFtZSk7CiAgICAgICAgfQogICAgICB9CgogICAgICByZXR1cm4gY3VycmVuY2llc0xpc3QubGVuZ3RoID4gMCA/IGN1cnJlbmNpZXNMaXN0LmpvaW4oIiwgIikgOiAiaW5mb3JtYXRpb24gbm90IGF2YWlsYWJsZSI7CiAgICB9LAogICAgY291bnRyeUxhbmd1YWdlczogZnVuY3Rpb24gY291bnRyeUxhbmd1YWdlcygpIHsKICAgICAgdmFyIGNvdW50cnlMYW5ndWFnZXMgPSBbXTsKCiAgICAgIGZvciAodmFyIF9pMiA9IDAsIF9PYmplY3QkdmFsdWVzMiA9IE9iamVjdC52YWx1ZXModGhpcy5maWx0ZXJlZE5hdGlvbi5sYW5ndWFnZXMpOyBfaTIgPCBfT2JqZWN0JHZhbHVlczIubGVuZ3RoOyBfaTIrKykgewogICAgICAgIHZhciBsYW5ndWFnZSA9IF9PYmplY3QkdmFsdWVzMltfaTJdOwogICAgICAgIGNvdW50cnlMYW5ndWFnZXMucHVzaChsYW5ndWFnZSk7CiAgICAgIH0KCiAgICAgIHJldHVybiBjb3VudHJ5TGFuZ3VhZ2VzLmpvaW4oIiwgIik7CiAgICB9LAogICAgZmlsdGVyZWRDb3VudHJ5Qm9yZGVyTmFtZXM6IGZ1bmN0aW9uIGZpbHRlcmVkQ291bnRyeUJvcmRlck5hbWVzKCkgewogICAgICB0aGlzLmdldEJvcmRlcnNOYW1lcygpOwogICAgICByZXR1cm4gdGhpcy5jb3VudHJ5Qm9yZGVyTmFtZXMgPT09IGZhbHNlID8gIm5vbmUiIDogdGhpcy5jb3VudHJ5Qm9yZGVyTmFtZXM7CiAgICB9CiAgfSwKICBjcmVhdGVkOiBmdW5jdGlvbiBjcmVhdGVkKCkgewogICAgdGhpcy5sb2FkTmF0aW9ucygpOwogIH0sCiAgbWV0aG9kczogewogICAgLy9sb2FkIHRoZSBDb3VudHJpZXMgZnJvbSB0aGUgQVBJCiAgICBsb2FkTmF0aW9uczogZnVuY3Rpb24gbG9hZE5hdGlvbnMoKSB7CiAgICAgIHZhciBfdGhpczIgPSB0aGlzOwoKICAgICAgcmV0dXJuIF9hc3luY1RvR2VuZXJhdG9yKCAvKiNfX1BVUkVfXyovcmVnZW5lcmF0b3JSdW50aW1lLm1hcmsoZnVuY3Rpb24gX2NhbGxlZSgpIHsKICAgICAgICByZXR1cm4gcmVnZW5lcmF0b3JSdW50aW1lLndyYXAoZnVuY3Rpb24gX2NhbGxlZSQoX2NvbnRleHQpIHsKICAgICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICAgIHN3aXRjaCAoX2NvbnRleHQucHJldiA9IF9jb250ZXh0Lm5leHQpIHsKICAgICAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgICAgICBfdGhpczIuaXNMb2FkaW5nID0gdHJ1ZTsKICAgICAgICAgICAgICAgIF9jb250ZXh0LnByZXYgPSAxOwogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDQ7CiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMyLiRzdG9yZS5kaXNwYXRjaCgibG9hZE5hdGlvbnMiKTsKCiAgICAgICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDk7CiAgICAgICAgICAgICAgICBicmVhazsKCiAgICAgICAgICAgICAgY2FzZSA2OgogICAgICAgICAgICAgICAgX2NvbnRleHQucHJldiA9IDY7CiAgICAgICAgICAgICAgICBfY29udGV4dC50MCA9IF9jb250ZXh0WyJjYXRjaCJdKDEpOwogICAgICAgICAgICAgICAgX3RoaXMyLmVycm9yID0gX2NvbnRleHQudDAubWVzc2FnZSB8fCAiU29tZXRoaW5nIHdlbnQgd3JvbmciOwoKICAgICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgICBfdGhpczIuaXNMb2FkaW5nID0gZmFsc2U7CgogICAgICAgICAgICAgIGNhc2UgMTA6CiAgICAgICAgICAgICAgY2FzZSAiZW5kIjoKICAgICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9LCBfY2FsbGVlLCBudWxsLCBbWzEsIDZdXSk7CiAgICAgIH0pKSgpOwogICAgfSwKICAgIC8vRXh0cmFjdCB0aGUgYWN0dWFsIG5hbWUgb2YgdGhlIENvdW50cmllcyB0aGF0IHdpbGwgYmUgdXNlZCBpbiBib3JkZXJzIGJ1dHRvbnMgYnkgZmluZGluZyB0aGUgY2NhMyB2YWx1ZSAodGhpcyB2YWx1ZSBpcyB0aGUgc2FtZSBvZiB0aGUgdmFsdWUgb2YgdGhlIGJvcmRlcnMgaW4gdGhlIEpTT04pIGFuZCBleHRyYWN0IHRoZSBjb21tb24gbmFtZSB0b28uCiAgICBnZXRCb3JkZXJzTmFtZXM6IGZ1bmN0aW9uIGdldEJvcmRlcnNOYW1lcygpIHsKICAgICAgdmFyIF90aGlzMyA9IHRoaXM7CgogICAgICB2YXIgbmF0aW9ucyA9IHRoaXMuJHN0b3JlLmdldHRlcnMubmF0aW9uczsKCiAgICAgIGlmICghdGhpcy5maWx0ZXJlZE5hdGlvbi5ib3JkZXJzKSB7CiAgICAgICAgdGhpcy5jb3VudHJ5Qm9yZGVyTmFtZXMgPSBbXTsKICAgICAgfSBlbHNlIHsKICAgICAgICAvL2NyZWF0ZSBhbiBhcnJheSBvZiBvYmplY3Qgd2l0aCB0aGUgY29kZSBjY2EzIGFuZCB0aGUgY29ycmVzcG9uZGluZyBuYXRpb24gbmFtZSBvZiBhbGwgdGhlIG5hdGlvbnMgaW4gb3JkZXIgdG8gZXh0cmFjdCB0aGlzIGxhc3Qgb25lCiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBuYXRpb25zLmxlbmd0aDsgaSsrKSB7CiAgICAgICAgICB0aGlzLmNvdW50cnlCb3JkZXJOYW1lcy5wdXNoKHsKICAgICAgICAgICAgbmF0aW9uQm9yZGVyTmFtZTogbmF0aW9uc1tpXS5jY2EzLAogICAgICAgICAgICBuYXRpb25OYW1lOiBuYXRpb25zW2ldLm5hbWUuY29tbW9uCiAgICAgICAgICB9KTsKICAgICAgICB9CiAgICAgIH0KCiAgICAgIHZhciByZW5hbWVkQm9yZGVycyA9IFtdOyAvL2ZpbHRlciB0byBleHRyYWN0IG9ubHkgdGhlIGJvcmRlcnMgZnJvbSBjb3VudHJ5Qm9yZGVyTmFtZXMgYW5kIHRoZW4gcHVzaCBvbmx5IHRoZSBjb21tb24gbmFtZQoKICAgICAgdmFyIGZpbHRlckJvcmRlcnMgPSB0aGlzLmNvdW50cnlCb3JkZXJOYW1lcy5maWx0ZXIoZnVuY3Rpb24gKGJvcmRlcikgewogICAgICAgIHJldHVybiBfdGhpczMuZmlsdGVyZWROYXRpb24uYm9yZGVycy5pbmNsdWRlcyhib3JkZXIubmF0aW9uQm9yZGVyTmFtZSk7CiAgICAgIH0pOwoKICAgICAgdmFyIF9pdGVyYXRvciA9IF9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyKGZpbHRlckJvcmRlcnMpLAogICAgICAgICAgX3N0ZXA7CgogICAgICB0cnkgewogICAgICAgIGZvciAoX2l0ZXJhdG9yLnMoKTsgIShfc3RlcCA9IF9pdGVyYXRvci5uKCkpLmRvbmU7KSB7CiAgICAgICAgICB2YXIgYm9yZGVyID0gX3N0ZXAudmFsdWU7CiAgICAgICAgICByZW5hbWVkQm9yZGVycy5wdXNoKGJvcmRlci5uYXRpb25OYW1lKTsKICAgICAgICB9CiAgICAgIH0gY2F0Y2ggKGVycikgewogICAgICAgIF9pdGVyYXRvci5lKGVycik7CiAgICAgIH0gZmluYWxseSB7CiAgICAgICAgX2l0ZXJhdG9yLmYoKTsKICAgICAgfQoKICAgICAgaWYgKHJlbmFtZWRCb3JkZXJzICE9PSBbXSkgewogICAgICAgIHRoaXMuY291bnRyeUJvcmRlck5hbWVzID0gcmVuYW1lZEJvcmRlcnMuc29ydCgpOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"mappings":"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","names":["NationCardDetails","components","props","name","type","String","required","data","isLoading","countryBorderNames","computed","filteredNation","$store","getters","nations","find","country","nameSlug","common","split","join","countryNativeName","lastEntryNativeName","Object","values","nativeName","pop","countrySubRegion","subregion","countryTopLevelDomain","tld","countryCurrencies","currenciesList","currencies","currenciesName","push","length","countryLanguages","languages","language","filteredCountryBorderNames","getBordersNames","created","loadNations","methods","dispatch","error","message","borders","i","nationBorderName","cca3","nationName","renamedBorders","filterBorders","filter","border","includes","sort"],"sourceRoot":"","sources":["/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/src/pages/NationDetails.vue"],"sourcesContent":["<template>\n  <div class=\"country\">\n    <base-button class=\"back-button\">\n      <span class=\"back-arrow\">&#x2190;</span> Back</base-button\n    >\n    <base-spinner v-if=\"this.isLoading\"></base-spinner>\n    <nation-card-details\n      v-else\n      :flags=\"filteredNation.flags\"\n      :name=\"filteredNation.name.common\"\n      :nativeName=\"countryNativeName\"\n      :population=\"filteredNation.population\"\n      :subregion=\"countrySubRegion\"\n      :capital=\"filteredNation.capital[0]\"\n      :tld=\"countryTopLevelDomain\"\n      :currencies=\"countryCurrencies\"\n      :languages=\"countryLanguages\"\n      :borders=\"filteredCountryBorderNames\"\n    ></nation-card-details>\n  </div>\n</template>\n<script>\nimport NationCardDetails from \"../components/NationCardDetails.vue\";\nexport default {\n  components: {\n    NationCardDetails,\n  },\n  props: {\n    name: {\n      type: String,\n      required: true,\n    },\n  },\n  data() {\n    return {\n      isLoading: false,\n      countryBorderNames: [],\n    };\n  },\n  computed: {\n    filteredNation() {\n      //return this.$store.getters.nations;\n      return this.$store.getters.nations.find((country) => {\n        const nameSlug = country.name.common.split(\" \").join(\"-\");\n        return nameSlug === this.name;\n      });\n    },\n    countryNativeName() {\n      //to extract the last entry in native names\n      const lastEntryNativeName = Object.values(\n        this.filteredNation.name.nativeName\n      ).pop().common;\n      return lastEntryNativeName;\n    },\n    countrySubRegion() {\n      return this.filteredNation.subregion\n        ? this.filteredNation.subregion\n        : \"none\";\n    },\n    countryTopLevelDomain() {\n      return !this.filteredNation.tld\n        ? \"none\"\n        : this.filteredNation.tld.join(\", \");\n    },\n    countryCurrencies() {\n      const currenciesList = [];\n\n      if (this.filteredNation.currencies) {\n        for (const currenciesName of Object.values(\n          this.filteredNation.currencies\n        )) {\n          currenciesList.push(currenciesName.name);\n        }\n      }\n\n      return currenciesList.length > 0\n        ? currenciesList.join(\", \")\n        : \"information not available\";\n    },\n    countryLanguages() {\n      const countryLanguages = [];\n\n      for (const language of Object.values(this.filteredNation.languages)) {\n        countryLanguages.push(language);\n      }\n      return countryLanguages.join(\", \");\n    },\n    filteredCountryBorderNames() {\n      this.getBordersNames();\n      return this.countryBorderNames === false\n        ? \"none\"\n        : this.countryBorderNames;\n    },\n  },\n\n  created() {\n    this.loadNations();\n  },\n  methods: {\n    //load the Countries from the API\n    async loadNations() {\n      this.isLoading = true;\n      try {\n        await this.$store.dispatch(\"loadNations\");\n      } catch (error) {\n        this.error = error.message || \"Something went wrong\";\n      }\n      this.isLoading = false;\n    },\n    //Extract the actual name of the Countries that will be used in borders buttons by finding the cca3 value (this value is the same of the value of the borders in the JSON) and extract the common name too.\n    getBordersNames() {\n      const nations = this.$store.getters.nations;\n\n      if (!this.filteredNation.borders) {\n        this.countryBorderNames = [];\n      } else {\n        //create an array of object with the code cca3 and the corresponding nation name of all the nations in order to extract this last one\n        for (let i = 0; i < nations.length; i++) {\n          this.countryBorderNames.push({\n            nationBorderName: nations[i].cca3,\n            nationName: nations[i].name.common,\n          });\n        }\n      }\n\n      const renamedBorders = [];\n\n      //filter to extract only the borders from countryBorderNames and then push only the common name\n      const filterBorders = this.countryBorderNames.filter((border) =>\n        this.filteredNation.borders.includes(border.nationBorderName)\n      );\n\n      for (const border of filterBorders) {\n        renamedBorders.push(border.nationName);\n      }\n      if (renamedBorders !== []) {\n        this.countryBorderNames = renamedBorders.sort();\n      }\n    },\n  },\n};\n</script>\n<style scoped>\n.country {\n  position: relative;\n  padding: 7rem 1.5rem 0 1.5rem;\n}\n.button.back-button {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 8rem;\n  letter-spacing: 5px;\n  margin-bottom: 4rem;\n}\n.back-arrow {\n  font-size: 1.5rem;\n}\n@media screen and (min-width: 600px) {\n}\n@media screen and (min-width: 900px) {\n}\n@media screen and (min-width: 1200px) {\n}\n</style>\n"]}]}