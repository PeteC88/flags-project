{"remainingRequest":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/babel-loader/lib/index.js!/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/eslint-loader/index.js??ref--14-0!/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/src/store/actions.js","dependencies":[{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/src/store/actions.js","mtime":1650906520366},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/babel.config.js","mtime":1649769569947},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/cache-loader/dist/cjs.js","mtime":1649769531592},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/babel-loader/lib/index.js","mtime":1649769535122},{"path":"/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/node_modules/eslint-loader/index.js","mtime":1649769532101}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IF9hc3luY1RvR2VuZXJhdG9yIGZyb20gIi9Vc2Vycy9waWV0cm9jaWNjYXJlbGxvL0Rlc2t0b3AvRnJvbnRlbmRNZW50b3IgUHJvamVjdHMvZmxhZy1jaGFsbGVuZ2UvcmVzdC1jb3VudHJpZXMtYXBpLXdpdGgtY29sb3ItdGhlbWUtc3dpdGNoZXItbWFzdGVyL2ZsYWdzLXByb2plY3Qvbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2FzeW5jVG9HZW5lcmF0b3IuanMiOwppbXBvcnQgInJlZ2VuZXJhdG9yLXJ1bnRpbWUvcnVudGltZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLm9iamVjdC50by1zdHJpbmcuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5lcnJvci5jYXVzZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmZ1bmN0aW9uLm5hbWUuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5yZWdleHAuZmxhZ3MuanMiOwpleHBvcnQgZGVmYXVsdCB7CiAgLy9hY3Rpb24gdG8gZmV0Y2ggdGhlIGRhdGEgZnJvbSB0aGUgQVBJCiAgbG9hZE5hdGlvbnM6IGZ1bmN0aW9uIGxvYWROYXRpb25zKGNvbnRleHQpIHsKICAgIHJldHVybiBfYXN5bmNUb0dlbmVyYXRvciggLyojX19QVVJFX18qL3JlZ2VuZXJhdG9yUnVudGltZS5tYXJrKGZ1bmN0aW9uIF9jYWxsZWUoKSB7CiAgICAgIHZhciByZXNwb25zZSwgcmVzcG9uc2VEYXRhLCBlcnJvciwgbmF0aW9ucywga2V5LCBuYXRpb247CiAgICAgIHJldHVybiByZWdlbmVyYXRvclJ1bnRpbWUud3JhcChmdW5jdGlvbiBfY2FsbGVlJChfY29udGV4dCkgewogICAgICAgIHdoaWxlICgxKSB7CiAgICAgICAgICBzd2l0Y2ggKF9jb250ZXh0LnByZXYgPSBfY29udGV4dC5uZXh0KSB7CiAgICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgICBfY29udGV4dC5uZXh0ID0gMjsKICAgICAgICAgICAgICByZXR1cm4gZmV0Y2goJ2h0dHBzOi8vcmVzdGNvdW50cmllcy5jb20vdjMuMS9hbGwnKTsKCiAgICAgICAgICAgIGNhc2UgMjoKICAgICAgICAgICAgICByZXNwb25zZSA9IF9jb250ZXh0LnNlbnQ7CiAgICAgICAgICAgICAgX2NvbnRleHQubmV4dCA9IDU7CiAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTsKCiAgICAgICAgICAgIGNhc2UgNToKICAgICAgICAgICAgICByZXNwb25zZURhdGEgPSBfY29udGV4dC5zZW50OwoKICAgICAgICAgICAgICBpZiAocmVzcG9uc2Uub2spIHsKICAgICAgICAgICAgICAgIF9jb250ZXh0Lm5leHQgPSA5OwogICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgfQoKICAgICAgICAgICAgICBlcnJvciA9IG5ldyBFcnJvcihyZXNwb25zZURhdGEubWVzc2FnZSB8fCAnRmFpbGVkIHRvIGZldGNoJyk7CiAgICAgICAgICAgICAgdGhyb3cgZXJyb3I7CgogICAgICAgICAgICBjYXNlIDk6CiAgICAgICAgICAgICAgbmF0aW9ucyA9IFtdOwoKICAgICAgICAgICAgICBmb3IgKGtleSBpbiByZXNwb25zZURhdGEpIHsKICAgICAgICAgICAgICAgIG5hdGlvbiA9IHsKICAgICAgICAgICAgICAgICAgbmFtZTogcmVzcG9uc2VEYXRhW2tleV0ubmFtZSwKICAgICAgICAgICAgICAgICAgcG9wdWxhdGlvbjogcmVzcG9uc2VEYXRhW2tleV0ucG9wdWxhdGlvbiwKICAgICAgICAgICAgICAgICAgcmVnaW9uOiByZXNwb25zZURhdGFba2V5XS5yZWdpb24sCiAgICAgICAgICAgICAgICAgIGNhcGl0YWw6IHJlc3BvbnNlRGF0YVtrZXldLmNhcGl0YWwsCiAgICAgICAgICAgICAgICAgIGZsYWdzOiByZXNwb25zZURhdGFba2V5XS5mbGFncwogICAgICAgICAgICAgICAgfTsKICAgICAgICAgICAgICAgIG5hdGlvbnMucHVzaChuYXRpb24pOwoKICAgICAgICAgICAgICAgIGlmICghbmF0aW9uLmNhcGl0YWwpIHsKICAgICAgICAgICAgICAgICAgbmF0aW9uLmNhcGl0YWwgPSAiTm9uZSI7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSAvL2NvbW1pdCB0aGUgYWN0aW9uIHRvIHRoZSBtdXRhdGlvbnMKCgogICAgICAgICAgICAgIGNvbnRleHQuY29tbWl0KCdzZXROYXRpb25zJywgbmF0aW9ucyk7CgogICAgICAgICAgICBjYXNlIDEyOgogICAgICAgICAgICBjYXNlICJlbmQiOgogICAgICAgICAgICAgIHJldHVybiBfY29udGV4dC5zdG9wKCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9LCBfY2FsbGVlKTsKICAgIH0pKSgpOwogIH0KfTs="},{"version":3,"sources":["/Users/pietrociccarello/Desktop/FrontendMentor Projects/flag-challenge/rest-countries-api-with-color-theme-switcher-master/flags-project/src/store/actions.js"],"names":["loadNations","context","fetch","response","json","responseData","ok","error","Error","message","nations","key","nation","name","population","region","capital","flags","push","commit"],"mappings":";;;;;;AAAA,eAAe;AACX;AACMA,EAAAA,WAFK,uBAEOC,OAFP,EAEgB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACAC,KAAK,CAAC,oCAAD,CADL;;AAAA;AACjBC,cAAAA,QADiB;AAAA;AAAA,qBAEIA,QAAQ,CAACC,IAAT,EAFJ;;AAAA;AAEjBC,cAAAA,YAFiB;;AAAA,kBAIlBF,QAAQ,CAACG,EAJS;AAAA;AAAA;AAAA;;AAKbC,cAAAA,KALa,GAKL,IAAIC,KAAJ,CAAUH,YAAY,CAACI,OAAb,IAAwB,iBAAlC,CALK;AAAA,oBAMbF,KANa;;AAAA;AASjBG,cAAAA,OATiB,GASP,EATO;;AAWvB,mBAAWC,GAAX,IAAkBN,YAAlB,EAAgC;AACtBO,gBAAAA,MADsB,GACb;AACXC,kBAAAA,IAAI,EAAER,YAAY,CAACM,GAAD,CAAZ,CAAkBE,IADb;AAEXC,kBAAAA,UAAU,EAAET,YAAY,CAACM,GAAD,CAAZ,CAAkBG,UAFnB;AAGXC,kBAAAA,MAAM,EAAEV,YAAY,CAACM,GAAD,CAAZ,CAAkBI,MAHf;AAIXC,kBAAAA,OAAO,EAAEX,YAAY,CAACM,GAAD,CAAZ,CAAkBK,OAJhB;AAKXC,kBAAAA,KAAK,EAAEZ,YAAY,CAACM,GAAD,CAAZ,CAAkBM;AALd,iBADa;AAS5BP,gBAAAA,OAAO,CAACQ,IAAR,CAAaN,MAAb;;AAEA,oBAAI,CAACA,MAAM,CAACI,OAAZ,EAAqB;AACjBJ,kBAAAA,MAAM,CAACI,OAAP,GAAiB,MAAjB;AACH;AACJ,eAzBsB,CA0BvB;;;AACAf,cAAAA,OAAO,CAACkB,MAAR,CAAe,YAAf,EAA6BT,OAA7B;;AA3BuB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA4B1B;AA9BU,CAAf","sourcesContent":["export default {\n    //action to fetch the data from the API\n    async loadNations(context) {\n        const response = await fetch('https://restcountries.com/v3.1/all');\n        const responseData = await response.json();\n\n        if (!response.ok) {\n            const error = new Error(responseData.message || 'Failed to fetch');\n            throw error\n        }\n\n        const nations = [];\n\n        for (const key in responseData) {\n            const nation = {\n                name: responseData[key].name,\n                population: responseData[key].population,\n                region: responseData[key].region,\n                capital: responseData[key].capital,\n                flags: responseData[key].flags\n            }\n\n            nations.push(nation);\n\n            if (!nation.capital) {\n                nation.capital = \"None\";\n            }\n        }\n        //commit the action to the mutations\n        context.commit('setNations', nations)\n    }\n};"]}]}